---
const props = Astro.props;
---

<footer
  class='bg-stone-900 px-8 py-4 mt-2 flex justify-between items-center
rounded-full w-full max-w-screen-xl mx-auto my-0'
>
  <!-- Texto o Título -->
  <div class='flex justify-center items-center gap-2'>
    <h1 class='text-white text-lg font-semibold'>César Coello</h1>

    <!-- Contenedor del SVG con tooltip -->
    <div class='tooltip-container font-medium'>
      <svg
        xmlns='http://www.w3.org/2000/svg'
        width='1em'
        height='1em'
        viewBox='0 0 24 24'
        fill='currentColor'
        class='tooltip-target'
        {...props}
      >
        <g fill='currentColor'>
          <path
            d='M12 4a8 8 0 1 0 0 16a8 8 0 0 0 0-16M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12'
          ></path>
          <path
            d='M12 10a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-6a1 1 0 0 1 1-1m1.5-2.5a1.5 1.5 0 1 1-3 0a1.5 1.5 0 0 1 3 0'
          ></path>
        </g>
      </svg>
      <span class='tooltip-text w-1/2'
        >Este sitio web está hecho por mí en Astro, TypeScript y TailwindCSS</span
      >
    </div>
  </div>

  <div class='flex items-center gap-4 md:gap-8'>
    <!-- Copyright -->
    <p class='flex items-center gap-1 text-gray-400 font-semibold'>
      <svg
        xmlns='http://www.w3.org/2000/svg'
        width='1em'
        height='1em'
        viewBox='0 0 24 24'
        {...props}
      >
        <g
          fill='none'
          stroke='currentColor'
          stroke-linecap='round'
          stroke-linejoin='round'
          stroke-width='2'
        >
          <circle cx='12' cy='12' r='10'></circle>
          <path d='M14.83 14.83a4 4 0 1 1 0-5.66'></path>
        </g>
      </svg> 2024
    </p>

    <!-- Flecha para volver al inicio -->
    <a
      href='#navbar'
      class='text-white hover:text-gray-400 transition duration-200'
    >
      <svg
        xmlns='http://www.w3.org/2000/svg'
        width='1.5em'
        height='1.5em'
        viewBox='0 0 24 24'
        {...props}
      >
        <g
          fill='none'
          stroke='currentColor'
          stroke-linecap='round'
          stroke-linejoin='round'
          stroke-width='2'
        >
          <path stroke-dasharray='20' stroke-dashoffset='20' d='M12 21l0 -17.5'>
            <animate
              fill='freeze'
              attributeName='stroke-dashoffset'
              dur='0.2s'
              values='20;0'></animate>
          </path>
          <path
            stroke-dasharray='12'
            stroke-dashoffset='12'
            d='M12 3l7 7M12 3l-7 7'
          >
            <animate
              fill='freeze'
              attributeName='stroke-dashoffset'
              begin='0.2s'
              dur='0.2s'
              values='12;0'></animate>
          </path>
        </g>
      </svg>
    </a>
  </div>
</footer>

<style>
  .tooltip-container {
    position: relative;
    display: inline-block;
  }

  .tooltip-text {
    visibility: hidden;
    width: 70vw; /* Ancho del tooltip en la mitad del tamaño de la pantalla */
    max-width: 300px; /* Opcional: límite máximo de ancho para pantallas grandes */
    background-color: black;
    color: white;
    text-align: center;
    border-radius: 6px;
    padding: 8px;
    position: absolute;
    bottom: 100%; /* Hace que el tooltip aparezca arriba del svg */
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity 0.3s;
    z-index: 1; /* Para que el tooltip esté por encima del contenido */
  }

  .tooltip-text::after {
    content: "";
    position: absolute;
    top: 100%; /* Flecha hacia abajo apuntando al svg */
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: black transparent transparent transparent; /* Flecha */
  }

  .tooltip-target:hover + .tooltip-text {
    visibility: visible;
    opacity: 1;
  }
</style>

<script>
  const tooltipTarget = document.querySelector(".tooltip-target");
  const tooltipText = document.querySelector(".tooltip-text") as HTMLElement;

  // Verifica si tooltipText no es null antes de agregar los eventos
  if (tooltipText) {
    // Al pasar el mouse
    tooltipTarget?.addEventListener("mouseenter", () => {
      tooltipText.style.visibility = "visible";
      tooltipText.style.opacity = "1";
    });

    // Al salir del mouse
    tooltipTarget?.addEventListener("mouseleave", () => {
      setTimeout(() => {
        tooltipText.style.visibility = "hidden";
        tooltipText.style.opacity = "0";
      }, 1500); // Espera 1.5 segundos (1500 ms) antes de ocultar
    });

    // Para manejar el toque en dispositivos móviles
    tooltipTarget?.addEventListener("touchstart", () => {
      tooltipText.style.visibility = "visible";
      tooltipText.style.opacity = "1";
      setTimeout(() => {
        tooltipText.style.visibility = "hidden";
        tooltipText.style.opacity = "0";
      }, 3000); // Espera 3 segundos (3000 ms) antes de ocultar
    });
  }
</script>
